stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - test-deployment

image: python:3.8.10

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  FLASK_SECRET_KEY: $FLASK_SECRET_KEY
  DATABASE_URL: $DATABASE_URL
  TEST_FLASK_SECRET_KEY: $TEST_FLASK_SECRET_KEY
  REGISTRATION_SECRET_PHRASE: $REGISTRATION_SECRET_PHRASE
  TEST_REGISTRATION_SECRET_PHRASE: $TEST_REGISTRATION_SECRET_PHRASE
  TEST_API_URL: "bollards-api.wakxy.rocks"
  TEST_COVERAGE_URL: bollards.wakxy.rocks/coverage/api
  API_URL: "bollards-api.ch"

# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V               # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

build-project:
  stage: build
  script:
    - echo ${CI_COMMIT_SHORT_SHA}
    - echo "Building python dependencies..."
    - pip install -r requirements.txt
    - echo "done..."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  environment:
    name: code-coverage
    url: https://jeanmariealder.gitlab.io/-/bollards-api/-/jobs/$CI_JOB_ID/artifacts/htmlcov/index.html
  script:
    - echo "Running unit tests..."
    - pytest --cov=bollards_api --cov-report=html
    - echo "done..."
  artifacts:
    paths:
      - ./htmlcov

sonarqube-fake-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  variables:
    GIT_STRATEGY: none
  cache: []
  before_script: []
  script:
    - echo "Lemme fake some security scanner over here."
    - sleep 10
    - echo "No security issues found, at all."

deploy-job-staging:
  image: alpine
  stage: deploy
  variables:
    GIT_STRATEGY: none
  cache: []
  environment:
    name: staging
    url: https://$TEST_API_URL
  only:
    - develop
  before_script:
    - echo "Alpine image loaded."
  script:
    - echo "Deploying application on development server..."
    - chmod og= $TEST_ID_RSA # This is a requirements, they said...
    - apk update && apk add openssh-client
    - ssh -i $TEST_ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$TEST_SERVER_URL "cd /srv/bollards/bollards_api && git checkout bollards_api/templates/home.html && git pull"
    - ssh -i $TEST_ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$TEST_SERVER_URL "sed -i 's/%%VERSION%%/$CI_COMMIT_SHORT_SHA/' /srv/bollards/bollards_api/bollards_api/templates/home.html"
    - ssh -i $TEST_ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$TEST_SERVER_URL "cd /srv/bollards && docker-compose up -d --build flask_api"
    - ssh -i $TEST_ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$TEST_SERVER_URL "docker exec flask_api flask db upgrade"
    - echo "Application successfully deployed (Development)."

test-staging-deployment:
  image: alpine
  stage: test-deployment
  variables:
    GIT_STRATEGY: none
  cache: []
  only:
    - develop
  before_script:
    - echo "Alpine image loaded."
  script:
    - echo "Testing build $CI_COMMIT_SHORT_SHA on staging server."
    - apk add --no-cache curl
    - sleep 5
    - curl -s "https://$TEST_API_URL" | grep -q "Welcome to Bollards API"
    - curl -s "https://$TEST_API_URL" | grep -q "$CI_COMMIT_SHORT_SHA"
    - echo "Build $CI_COMMIT_SHORT_SHA is live on staging server."


deploy-job-production:
  image: alpine
  stage: deploy
  variables:
    GIT_STRATEGY: none
  cache: []
  environment:
    name: production
    url: https://$API_URL
  when: manual
  allow_failure: false
  only:
    - master
  before_script:
    - echo "Alpine image loaded."
  script:
    - echo "Deploying application on production server..."
    - chmod og= $ID_RSA # This is a requirements, they said...
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$SERVER_URL "cd /srv/bollards/bollards_api && git checkout bollards_api/templates/home.html && git pull"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$SERVER_URL "sed -i 's/%%VERSION%%/$CI_COMMIT_SHORT_SHA/' /srv/bollards/bollards_api/bollards_api/templates/home.html"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$SERVER_URL "cd /srv/bollards && docker-compose up -d --build flask_api"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $DEPLOYER_USER@$SERVER_URL "docker exec flask_api flask db upgrade"
    - echo "Application successfully deployed (Production)."

test-production-deployment:
  image: alpine
  stage: test-deployment
  variables:
    GIT_STRATEGY: none
  cache: []
  only:
    - master
  before_script:
    - echo "Alpine image loaded."
  script:
    - echo "Testing build $CI_COMMIT_SHORT_SHA on staging server."
    - apk add --no-cache curl
    - sleep 10
    - curl -s "https://$API_URL" | grep -q "Welcome to Bollards API"
    - curl -s "https://$API_URL" | grep -q "$CI_COMMIT_SHORT_SHA"
    - echo "Build $CI_COMMIT_SHORT_SHA is live on production server."
